token eq = "="
token or = "|"
token al = "<"
token ar = ">"
token ell = "..."
token opt = "?"
token newline = "\n"
token ident
token string

unit = unit-token | ident
unit-token = ident al string ar

unit-ell = unit-ell-full | unit-ell-opt | unit 
unit-ell-full = unit ell
unit-ell-opt = unit opt

expr-and = unit-ell...

expr-or = unit or unit expr-or-ext...
expr-or-ext = or unit

expr = expr-or | expr-and

statement-expr = ident eq expr newline

statement-token = ident<"token"> ident statement-token-annotation? newline
statement-token-annotation = eq string

statement-empty = newline

statement = statement-token | statement-expr | statement-empty

statements = statement...
